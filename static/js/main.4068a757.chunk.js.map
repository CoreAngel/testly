{"version":3,"sources":["components/SelectLoader.js","components/SelectRun.js","components/Question.js","components/QuestionsList.js","components/TestPanel.js","components/EndPanel.js","util/array.js","App.js","serviceWorker.js","index.js"],"names":["SelectLoader","setQuestions","useState","id","label","path","selected","setSelected","items","useEffect","absoluteUrl","window","location","protocol","host","pathname","replace","fetch","then","data","json","map","item","index","correctIndex","c","trim","toLowerCase","charCodeAt","Input","type","onChange","e","value","target","find","key","disabled","runTypes","Constiner","styled","div","runTest","Button","color","onClick","QuestionContainer","QuestionText","p","AnswersList","ul","Answer","li","correct","Question","number","question","answers","SearchContainer","QuestionsList","questions","searchState","setSearchState","searchedQuestions","filter","q","searchText","includes","placeholder","a","ButtonContainer","ButtonWithMargin","TestPanel","testQuestions","setTestQuestions","currentQuestion","setCurrentQuestion","setEndTest","slice","pop","checkAnswer","length","arrCopy","current","splice","fails","keyPressFun","event","keyCode","button","getAttribute","blur","addEventListener","removeEventListener","data-index","String","fromCharCode","FailsContainer","EndPanel","failedQuestions","sort","i1","i2","shuffle","array","temporaryValue","randomIndex","currentIndex","newArray","Math","floor","random","Container","Options","InnerContainer","App","endTest","SelectRun","runType","aItem","aIndex","aCorrectIndex","findIndex","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PA4DeA,EAzDM,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EACLC,mBAAS,CACrCC,GAAI,EACJC,MAAO,YACPC,KAAM,OAJ2B,mBAC9BC,EAD8B,KACpBC,EADoB,OAMrBL,mBAAS,CACrB,CACIC,GAAI,EACJC,MAAO,YACPC,KAAM,MAEV,CACIF,GAAI,EACJC,MAAO,KACPC,KAAM,WAEV,CACIF,GAAI,EACJC,MAAO,MACPC,KAAM,cAdPG,EAN8B,oBAwBrCC,qBAAU,WACN,GAAqB,MAAjBH,EAASD,KAAb,CAGA,IAAMK,EAAW,UAAMC,OAAOC,SAASC,SAAtB,aAAmCF,OAAOC,SAASE,MAAnD,OAA0DH,OAAOC,SAASG,SAASC,QAAQ,MAAO,KACnHC,MAAM,GAAD,OAAIP,EAAJ,iBAAwBJ,EAASD,OACjCa,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKE,KAAI,SAACC,EAAMC,GAC1B,IAAMC,EAAeF,EAAKG,EAAEC,OAAOC,cAAcC,WAAW,GAAK,GACjE,OAAO,eACAN,EADP,CAEIC,QACAE,EAAGD,UAGVN,MAAK,SAAAC,GAAI,OAAIlB,EAAakB,SAChC,CAACb,IAOJ,OACI,6BACI,kBAACuB,EAAA,EAAD,CAAOC,KAAK,SAASC,SAPZ,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACvB1B,EAAYC,EAAM2B,MAAK,SAAAb,GAAI,OAAIA,EAAKlB,QAAU6B,OAKDA,MAAO3B,EAASF,OACpDI,EAAMa,KAAI,SAAAC,GAAI,OAAI,4BAAQW,MAAOX,EAAKlB,MAAOgC,IAAKd,EAAKnB,GAAIkC,SAAuB,MAAbf,EAAKjB,MAAeiB,EAAKlB,a,iGCjDxG,IAAMkC,EAEW,qBAFXA,EAGW,qBAHXA,EAIU,oBAGjB9B,EAAQ,CACV,CACIL,GAAI,EACJC,MAAO,sCACP6B,MAViB,uBAYrB,CACI9B,GAAI,EACJC,MAAO,qCACP6B,MAAOK,GAEX,CACInC,GAAI,EACJC,MAAO,qCACP6B,MAAOK,GAEX,CACInC,GAAI,EACJC,MAAO,oCACP6B,MAAOK,IA0BTC,EAAYC,IAAOC,IAAV,KAIAzC,EA1BM,SAAC,GAAe,IAAd0C,EAAa,EAAbA,QAAa,EACAxC,mBAAS,CACrCC,GAAI,EACJC,MAAO,oCACP6B,MAAOK,IAJqB,mBACzBhC,EADyB,KACfC,EADe,KAYhC,OACI,kBAACgC,EAAD,KACI,kBAACV,EAAA,EAAD,CAAOC,KAAK,SAASC,SAPZ,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACvB1B,EAAYC,EAAM2B,MAAK,SAAAb,GAAI,OAAIA,EAAKW,QAAUA,OAKDA,MAAO3B,EAAS2B,OACpDzB,EAAMa,KAAI,SAAAC,GAAI,OAAI,4BAAQW,MAAOX,EAAKW,MAAOG,IAAKd,EAAKnB,IAAKmB,EAAKlB,WAEtE,kBAACuC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAMH,EAAQpC,EAAS2B,SAAxD,S,uYChDZ,IAWMa,EAAoBN,IAAOC,IAAV,KAGjBM,EAAeP,IAAOQ,EAAV,KAGZC,EAAcT,IAAOU,GAAV,KAIXC,EAASX,IAAOY,GAAV,KACY,qBAAEC,QAAuB,QAAU,UAG5CC,EAzBE,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASJ,EAAa,EAAbA,QAC1C,OACI,kBAACP,EAAD,KACI,kBAACC,EAAD,eAAkBQ,EAAlB,aAA6BC,IAC7B,kBAACP,EAAD,KACKQ,EAAQpC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC4B,EAAD,CAAQE,QAAS9B,IAAU8B,EAASjB,IAAKb,GAAQD,S,2ICH/F,IAqBMoC,EAAkBlB,IAAOC,IAAV,KAMNkB,EA3BO,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EACG1D,mBAAS,IADZ,mBAC5B2D,EAD4B,KACfC,EADe,KAG7BC,EAAoBH,EAAUI,QAAO,SAAA1C,GACvC,IAAMkC,EAAWlC,EAAK2C,EAAEtC,cAClBuC,EAAaL,EAAYnC,OAAOC,cACtC,OAAO6B,EAASW,SAASD,MAG7B,OACI,oCACI,kBAACR,EAAD,KACI,kBAAC7B,EAAA,EAAD,CAAOE,SAAU,gBAAEG,EAAF,EAAEA,OAAF,OAAc4B,EAAe5B,EAAOD,QAAQA,MAAO4B,EAAaO,YAAa,YAAatC,KAAK,YAEpH,6BACKiC,EAAkB1C,KAAI,gBAAEE,EAAF,EAAEA,MAAO0C,EAAT,EAASA,EAAGI,EAAZ,EAAYA,EAAG5C,EAAf,EAAeA,EAAf,OAAqB,kBAAC,EAAD,CAAUW,IAAKb,EAAOgC,OAAQhC,EAAQ,EAAGiC,SAAUS,EAAGR,QAASY,EAAGhB,QAAS5B,U,wOCfvI,IAwEM6C,EAAkB9B,IAAOC,IAAV,KAMf8B,EAAmB/B,YAAOG,IAAPH,CAAH,KAIPgC,EAlFG,SAAC,GAAwF,IAAvFC,EAAsF,EAAtFA,cAAeC,EAAuE,EAAvEA,iBAAkBC,EAAqD,EAArDA,gBAAiBC,EAAoC,EAApCA,mBAAoBC,EAAgB,EAAhBA,WAAgB,EAClFJ,EAAcK,MAAMH,EAAiBA,EAAkB,GAAGI,MAAtEd,EAD8F,EAC9FA,EAAGI,EAD2F,EAC3FA,EAAG5C,EADwF,EACxFA,EAERuD,EAAc,SAACzD,GACjB,GAAIE,IAAMF,EACFoD,EAAkB,EAAIF,EAAcQ,OACpCL,EAAmBD,EAAkB,IAErCC,EAAmB,GACnBC,GAAW,QAEZ,CACH,IAAMK,EAAO,YAAOT,GACdU,EAAUD,EAAQP,GACxBO,EAAQE,OAAOT,EAAiB,EAAhC,eACOQ,EADP,CAEIE,MAAOF,EAAQE,MAAQ,KAE3BX,EAAiBQ,KAInBI,EAAc,SAAAC,GAAU,IAGtBhE,EAFGiE,EAAWD,EAAXC,QAGP,GAAIA,GAAW,IAAMA,GAAW,GAC5BjE,EAAQiE,EAAU,QACf,GAAIA,GAAW,IAAMA,GAAW,GACnCjE,EAAQiE,EAAU,OACf,MAAIA,GAAW,IAAMA,GAAW,KAGnC,OAFAjE,EAAQiE,EAAU,GAKlBjE,GAAS8C,EAAEY,QAIfD,EAAYzD,IAGVsB,EAAU,SAAC0C,GACb,IAAME,EAASF,EAAMrD,OACfX,EAAQkE,EAAOC,aAAa,cAClCD,EAAOE,OACPX,GAAazD,IAQjB,OALAd,qBAAU,WAEN,OADAE,OAAOiF,iBAAiB,WAAYN,GAC7B,kBAAM3E,OAAOkF,oBAAoB,WAAYP,MACrD,CAACA,EAAaN,IAGb,6BACI,2BAAIL,EAAkB,EAAtB,IAA0BF,EAAcQ,QACxC,kBAAC,EAAD,CAAU1B,OAAQoB,EAAkB,EAAGlB,QAASY,EAAGb,SAAUS,IAC7D,kBAACK,EAAD,KAEQD,EAAEhD,KAAI,SAACC,EAAMC,GAAP,OACF,kBAACgD,EAAD,CAAkBuB,aAAYvE,EAAOa,IAAKb,EAAOqB,MAAM,UAAUC,QAASA,GACrEkD,OAAOC,aAAa,GAAKzE,U,6FChEtD,IAqBM0E,EAAiBzD,IAAOQ,EAAV,KAILkD,EAzBE,SAAC,GAAqB,IAApBzB,EAAmB,EAAnBA,cACT0B,EAAkB1B,EACnBT,QAAO,SAAA1C,GAAI,OAAIA,EAAK+D,MAAQ,KAC5Be,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAG9E,MAAQ+E,EAAG/E,SAEpC,OACI,oCACQ,8CAAoB4E,EAAgBlB,OAApC,IAA6CR,EAAcQ,QAC/D,6BACKkB,EAAgB9E,KAAI,SAAAC,GAAS,IACnBC,EAAyBD,EAAzBC,MAAO0C,EAAkB3C,EAAlB2C,EAAGI,EAAe/C,EAAf+C,EAAG5C,EAAYH,EAAZG,EAAG4D,EAAS/D,EAAT+D,MACvB,OAAO,oCACC,kBAAC,EAAD,CAAUjD,IAAKb,EAAOgC,OAAQhC,EAAQ,EAAGiC,SAAUS,EAAGR,QAASY,EAAGhB,QAAS5B,IAC3E,kBAACwE,EAAD,eAAwBZ,UCjBvCkB,EAAU,SAACC,GAKpB,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMvB,OAEnB2B,EAAQ,YAAOJ,GAEG,IAAjBG,GACHD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBG,EAFjBD,GAAgB,GAGhBC,EAASD,GAAgBC,EAASF,GAClCE,EAASF,GAAeD,EAG5B,OAAOG,G,ueC2EX,IAAMI,EAAYxE,IAAOC,IAAV,KAQTwE,EAAUzE,IAAOC,IAAV,KAKPyE,EAAiB1E,IAAOC,IAAV,KAOL0E,EAnGf,WAAgB,IAAD,EACqBjH,mBAAS,MAD9B,mBACN0D,EADM,KACK3D,EADL,OAE6BC,mBAAS,MAFtC,mBAENuE,EAFM,KAESC,EAFT,OAGiCxE,mBAAS,GAH1C,mBAGNyE,EAHM,KAGWC,EAHX,OAIiB1E,oBAAS,GAJ1B,mBAINkH,EAJM,KAIGvC,EAJH,KA0Db,OAAO,kBAACmC,EAAD,KACL,kBAACE,EAAD,KACE,kBAACD,EAAD,KACE,kBAACtE,EAAA,EAAD,CAAQC,MAAM,SAASC,QARb,WACd6B,EAAiB,MACjBG,GAAW,KAMP,QACA,kBAAC,EAAD,CAAc5E,aAAcA,IAC5B,kBAACoH,EAAD,CAAW3E,QAzDD,SAAC4E,GACf,GAAiB,MAAb1D,EAAJ,CAIA,IAAIa,EAAgBb,EAAUvC,KAAI,SAAAC,GAAS,IAClCC,EAAkBD,EAAlBC,MAAO0C,EAAW3C,EAAX2C,EAAGI,EAAQ/C,EAAR+C,EAAG5C,EAAKH,EAALG,EACpB,MAAO,CACLF,QACA0C,IACAI,EAAGA,EAAEhD,KAAI,SAACkG,EAAOC,GAAR,MAAoB,CAC3BnD,EAAGkD,EACH9F,EAAG+F,IAAW/F,MAEhB4D,MAAO,MAKTZ,EADE6C,IAAYhF,GAA+BgF,IAAYhF,EACzCiE,EAAQ9B,GAEX,YAAOA,GAGlB6C,IAAYhF,GAA+BgF,IAAYhF,IACzDmC,EAAgBA,EAAcpD,KAAI,SAAAC,GAChC,OAAO,eACFA,EADL,CAEE+C,EAAGkC,EAAQjF,EAAK+C,SAKtBI,EAAgBA,EAAcpD,KAAI,SAAAC,GAChC,IAAMmG,EAAgBnG,EAAK+C,EAAEqD,WAAU,SAAAH,GAAK,OAAIA,EAAM9F,KACtD,OAAO,eACFH,EADL,CAEE+C,EAAG/C,EAAK+C,EAAEhD,KAAI,SAAAkG,GAAK,OAAIA,EAAMlD,KAC7B5C,EAAGgG,OAIP5C,GAAW,GACXD,EAAmB,GACnBF,EAAiBD,QAeD,MAAbb,GAAsC,MAAjBa,GAAyB,+CACjC,MAAbb,GAAsC,MAAjBa,GAAyB,kBAAC,EAAD,CAAeb,UAAWA,IACvD,MAAjBa,IAAqC,IAAZ2C,GAAqB,kBAAC,EAAD,CAC3C3C,cAAeA,EACfC,iBAAkBA,EAClBC,gBAAiBA,EACjBC,mBAAoBA,EACpBC,WAAYA,IAEfuC,GAAW,kBAAC,EAAD,CAAU3C,cAAeA,OCxEvBkD,QACW,cAA7BhH,OAAOC,SAASgH,UAEe,UAA7BjH,OAAOC,SAASgH,UAEhBjH,OAAOC,SAASgH,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlH,MAAK,SAAAmH,GACjCA,EAAaC,kB","file":"static/js/main.4068a757.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Input} from 'reactstrap'\r\n\r\nconst SelectLoader = ({setQuestions}) => {\r\n    const [selected, setSelected] = useState({\r\n        id: 0,\r\n        label: 'Select...',\r\n        path: null\r\n    });\r\n    const [items] = useState([\r\n        {\r\n            id: 0,\r\n            label: 'Select...',\r\n            path: null\r\n        },\r\n        {\r\n            id: 1,\r\n            label: 'IO',\r\n            path: 'io.json'\r\n        },\r\n        {\r\n            id: 2,\r\n            label: 'PSK',\r\n            path: 'psk.json'\r\n        }\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (selected.path == null) {\r\n            return;\r\n        }\r\n        const absoluteUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname.replace(/\\/$/, '')}`;\r\n        fetch(`${absoluteUrl}/data/${selected.path}`)\r\n            .then(data => data.json())\r\n            .then(data => data.map((item, index) => {\r\n                const correctIndex = item.c.trim().toLowerCase().charCodeAt(0) - 97;\r\n                return {\r\n                    ...item,\r\n                    index,\r\n                    c: correctIndex\r\n                }\r\n            }))\r\n            .then(data => setQuestions(data));\r\n    }, [selected]);\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n        setSelected(items.find(item => item.label === value));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Input type='select' onChange={onChange} value={selected.label}>\r\n                {items.map(item => <option value={item.label} key={item.id} disabled={item.path == null}>{item.label}</option>)}\r\n            </Input>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SelectLoader;\r\n","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Button, Input} from \"reactstrap\";\r\n\r\nexport const runTypes = {\r\n    Q_ORDERED_A_ORDERED: 'Q_ORDERED_A_ORDERED',\r\n    Q_ORDERED_A_RANDOM: 'Q_ORDERED_A_RANDOM',\r\n    Q_RANDOM_A_ORDERED: 'Q_RANDOM_A_ORDERED',\r\n    Q_RANDOM_A_RANDOM: 'Q_RANDOM_A_RANDOM'\r\n};\r\n\r\nconst items = [\r\n    {\r\n        id: 0,\r\n        label: 'Questions Ordered - Answers Ordered',\r\n        value: runTypes.Q_ORDERED_A_ORDERED\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Questions Ordered - Answers Random',\r\n        value: runTypes.Q_ORDERED_A_RANDOM\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Questions Random - Answers Ordered',\r\n        value: runTypes.Q_RANDOM_A_ORDERED\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Questions Random - Answers Random',\r\n        value: runTypes.Q_RANDOM_A_RANDOM\r\n    }\r\n];\r\n\r\nconst SelectLoader = ({runTest}) => {\r\n    const [selected, setSelected] = useState({\r\n        id: 3,\r\n        label: 'Questions Random - Answers Random',\r\n        value: runTypes.Q_RANDOM_A_RANDOM\r\n    });\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n        setSelected(items.find(item => item.value === value));\r\n    };\r\n\r\n    return (\r\n        <Constiner>\r\n            <Input type='select' onChange={onChange} value={selected.value}>\r\n                {items.map(item => <option value={item.value} key={item.id}>{item.label}</option>)}\r\n            </Input>\r\n            <Button color='success' onClick={() => runTest(selected.value)}>Run</Button>\r\n        </Constiner>\r\n    )\r\n};\r\n\r\nconst Constiner = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport default SelectLoader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Question = ({number, question, answers, correct}) => {\r\n    return (\r\n        <QuestionContainer>\r\n            <QuestionText>{`${number}. ${question}`}</QuestionText>\r\n            <AnswersList>\r\n                {answers.map((item, index) => <Answer correct={index === correct} key={index}>{item}</Answer>)}\r\n            </AnswersList>\r\n        </QuestionContainer>\r\n    )\r\n};\r\n\r\nconst QuestionContainer = styled.div`\r\n    padding: 10px;\r\n`;\r\nconst QuestionText = styled.p`\r\n    font-weight: bold;\r\n`;\r\nconst AnswersList = styled.ul`\r\n    list-style-type: lower-alpha;\r\n`;\r\n\r\nconst Answer = styled.li`\r\n    background-color: ${({correct}) => correct ? 'green' : 'none'};\r\n`;\r\n\r\nexport default Question;\r\n","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Input} from \"reactstrap\";\r\nimport Question from './Question'\r\n\r\nconst QuestionsList = ({questions}) => {\r\n    const [searchState, setSearchState] = useState('');\r\n\r\n    const searchedQuestions = questions.filter(item => {\r\n        const question = item.q.toLowerCase();\r\n        const searchText = searchState.trim().toLowerCase();\r\n        return question.includes(searchText)\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <SearchContainer>\r\n                <Input onChange={({target}) => setSearchState(target.value)} value={searchState} placeholder={'Search...'} type='search'/>\r\n            </SearchContainer>\r\n            <div>\r\n                {searchedQuestions.map(({index, q, a, c}) =><Question key={index} number={index + 1} question={q} answers={a} correct={c}/>)}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst SearchContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 20px;\r\n`;\r\n\r\nexport default QuestionsList;\r\n","import React, {useEffect} from \"react\";\r\nimport Question from \"./Question\";\r\nimport styled from \"styled-components\";\r\nimport {Button} from \"reactstrap\";\r\n\r\nconst TestPanel = ({testQuestions, setTestQuestions, currentQuestion, setCurrentQuestion, setEndTest}) => {\r\n    const { q, a, c } = testQuestions.slice(currentQuestion, currentQuestion + 1).pop();\r\n\r\n    const checkAnswer = (index) => {\r\n        if (c === index) {\r\n            if (currentQuestion + 1 < testQuestions.length) {\r\n                setCurrentQuestion(currentQuestion + 1)\r\n            } else {\r\n                setCurrentQuestion(0);\r\n                setEndTest(true);\r\n            }\r\n        } else {\r\n            const arrCopy = [...testQuestions];\r\n            const current = arrCopy[currentQuestion];\r\n            arrCopy.splice(currentQuestion, 1, {\r\n                ...current,\r\n                fails: current.fails + 1,\r\n            });\r\n            setTestQuestions(arrCopy)\r\n        }\r\n    };\r\n\r\n    const keyPressFun = event => {\r\n        const {keyCode} = event;\r\n\r\n        let index;\r\n        if (keyCode >= 49 && keyCode <= 57) {\r\n            index = keyCode - 49;\r\n        } else if (keyCode >= 65 && keyCode <= 90) {\r\n            index = keyCode - 65;\r\n        } else if (keyCode >= 97 && keyCode <= 122) {\r\n            index = keyCode - 97;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        if (index >= a.length) {\r\n            return;\r\n        }\r\n\r\n        checkAnswer(index);\r\n    };\r\n\r\n    const onClick = (event) => {\r\n        const button = event.target;\r\n        const index = button.getAttribute('data-index');\r\n        button.blur();\r\n        checkAnswer(+index);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keypress', keyPressFun);\r\n        return () => window.removeEventListener('keypress', keyPressFun);\r\n    }, [keyPressFun, checkAnswer]);\r\n\r\n    return (\r\n        <div>\r\n            <p>{currentQuestion + 1}/{testQuestions.length}</p>\r\n            <Question number={currentQuestion + 1} answers={a} question={q}/>\r\n            <ButtonContainer>\r\n                {\r\n                    a.map((item, index) => (\r\n                        <ButtonWithMargin data-index={index} key={index} color='primary' onClick={onClick}>\r\n                            {String.fromCharCode(65 + index)}\r\n                        </ButtonWithMargin>)\r\n                    )\r\n                }\r\n            </ButtonContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-bottom: 50px;\r\n`;\r\n\r\nconst ButtonWithMargin = styled(Button)`\r\n  margin: 0 10px;\r\n`;\r\n\r\nexport default TestPanel;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Question from \"./Question\";\r\n\r\nconst EndPanel = ({testQuestions}) => {\r\n    const failedQuestions = testQuestions\r\n        .filter(item => item.fails > 0)\r\n        .sort((i1, i2) => i1.index - i2.index);\r\n\r\n    return (\r\n        <>\r\n                <p>Failed answers: {failedQuestions.length}/{testQuestions.length}</p>\r\n            <div>\r\n                {failedQuestions.map(item => {\r\n                    const {index, q, a, c, fails} = item;\r\n                    return <>\r\n                            <Question key={index} number={index + 1} question={q} answers={a} correct={c}/>\r\n                            <FailsContainer>Fails: {fails}</FailsContainer>\r\n                        </>\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst FailsContainer = styled.p`\r\n  margin-left: 35px;\r\n`;\r\n\r\nexport default EndPanel;\r\n","export const shuffle = (array) => {\r\n    let currentIndex = array.length;\r\n    let temporaryValue, randomIndex;\r\n    const newArray = [...array];\r\n\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = newArray[currentIndex];\r\n        newArray[currentIndex] = newArray[randomIndex];\r\n        newArray[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return newArray;\r\n};\r\n","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport SelectLoader from './components/SelectLoader'\nimport SelectRun, {runTypes} from './components/SelectRun'\nimport QuestionsList from \"./components/QuestionsList\";\nimport TestPanel from \"./components/TestPanel\";\nimport EndPanel from \"./components/EndPanel\";\nimport {shuffle} from \"./util/array\";\nimport {Button} from \"reactstrap\";\n\nfunction App() {\n  const [questions, setQuestions] = useState(null);\n  const [testQuestions, setTestQuestions] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [endTest, setEndTest] = useState(false);\n\n  const runTest = (runType) => {\n    if (questions == null) {\n      return;\n    }\n\n    let testQuestions = questions.map(item => {\n      const {index, q, a, c} = item;\n      return {\n        index,\n        q,\n        a: a.map((aItem, aIndex) => ({\n          a: aItem,\n          c: aIndex === c\n        })),\n        fails: 0\n      }\n    });\n\n    if (runType === runTypes.Q_RANDOM_A_ORDERED || runType === runTypes.Q_RANDOM_A_RANDOM) {\n      testQuestions = shuffle(testQuestions);\n    } else {\n      testQuestions = [...testQuestions];\n    }\n\n    if (runType === runTypes.Q_ORDERED_A_RANDOM || runType === runTypes.Q_RANDOM_A_RANDOM) {\n      testQuestions = testQuestions.map(item => {\n        return {\n          ...item,\n          a: shuffle(item.a)\n        }\n      })\n    }\n\n    testQuestions = testQuestions.map(item => {\n      const aCorrectIndex = item.a.findIndex(aItem => aItem.c);\n      return {\n        ...item,\n        a: item.a.map(aItem => aItem.a),\n        c: aCorrectIndex\n      }\n    });\n\n    setEndTest(false);\n    setCurrentQuestion(0);\n    setTestQuestions(testQuestions);\n  };\n\n  const backFun = () => {\n    setTestQuestions(null);\n    setEndTest(false);\n  };\n\n  return <Container>\n    <InnerContainer>\n      <Options>\n        <Button color='danger' onClick={backFun}>Back</Button>\n        <SelectLoader setQuestions={setQuestions}/>\n        <SelectRun runTest={runTest}/>\n      </Options>\n      {questions == null && testQuestions == null && <p>Choose questions</p>}\n      {questions != null && testQuestions == null && <QuestionsList questions={questions}/>}\n      {testQuestions != null && endTest === false && <TestPanel\n          testQuestions={testQuestions}\n          setTestQuestions={setTestQuestions}\n          currentQuestion={currentQuestion}\n          setCurrentQuestion={setCurrentQuestion}\n          setEndTest={setEndTest}\n      />}\n      {endTest && <EndPanel testQuestions={testQuestions}/>}\n    </InnerContainer>\n  </Container>;\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    background-color: #1f1f1f;\n    color: #e2e2e2;\n    min-height: 100vh;\n`;\n\nconst Options = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst InnerContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-width: 900px;\n    width: 100%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}