{"version":3,"sources":["components/SelectLoader.js","components/SelectRun.js","components/Question.js","components/QuestionsList.js","components/TestPanel.js","components/EndPanel.js","util/array.js","App.js","serviceWorker.js","index.js"],"names":["SelectLoader","setQuestions","useState","id","label","path","selected","setSelected","items","useEffect","fetch","window","location","href","then","data","json","map","item","correctIndex","c","trim","toLowerCase","charCodeAt","Input","type","onChange","e","value","target","find","key","disabled","runTypes","Constiner","styled","div","runTest","Button","color","onClick","QuestionContainer","QuestionText","p","AnswersList","ul","Answer","li","correct","Question","number","question","answers","index","QuestionsList","questions","q","a","Container","TestPanel","testQuestions","setTestQuestions","currentQuestion","setCurrentQuestion","setEndTest","slice","pop","keyUpFun","event","keyCode","length","arrCopy","current","splice","fails","addEventListener","removeEventListener","FailsContainer","EndPanel","failedQuestions","filter","sort","i1","i2","shuffle","array","temporaryValue","randomIndex","currentIndex","newArray","Math","floor","random","Options","InnerContainer","App","endTest","SelectRun","runType","aItem","aCorrectIndex","findIndex","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.460c12ac.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Input} from 'reactstrap'\r\n\r\nconst SelectLoader = ({setQuestions}) => {\r\n    const [selected, setSelected] = useState({\r\n        id: 0,\r\n        label: 'Select...',\r\n        path: null\r\n    });\r\n    const [items] = useState([\r\n        {\r\n            id: 0,\r\n            label: 'Select...',\r\n            path: null\r\n        },\r\n        {\r\n            id: 1,\r\n            label: 'IO',\r\n            path: 'io.json'\r\n        },\r\n        {\r\n            id: 2,\r\n            label: 'PSK',\r\n            path: 'psk.json'\r\n        }\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (selected.path == null) {\r\n            return;\r\n        }\r\n        fetch(`${window.location.href}data/${selected.path}`)\r\n            .then(data => data.json())\r\n            .then(data => data.map(item => {\r\n                const correctIndex = item.c.trim().toLowerCase().charCodeAt(0) - 97;\r\n                return {\r\n                    ...item,\r\n                    c: correctIndex\r\n                }\r\n            }))\r\n            .then(data => setQuestions(data));\r\n    }, [selected]);\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n        setSelected(items.find(item => item.label === value));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Input type='select' onChange={onChange} value={selected.label}>\r\n                {items.map(item => <option value={item.label} key={item.id} disabled={item.path == null}>{item.label}</option>)}\r\n            </Input>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SelectLoader;\r\n","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Button, Input} from \"reactstrap\";\r\n\r\nexport const runTypes = {\r\n    Q_ORDERED_A_ORDERED: 'Q_ORDERED_A_ORDERED',\r\n    Q_ORDERED_A_RANDOM: 'Q_ORDERED_A_RANDOM',\r\n    Q_RANDOM_A_ORDERED: 'Q_RANDOM_A_ORDERED',\r\n    Q_RANDOM_A_RANDOM: 'Q_RANDOM_A_RANDOM'\r\n};\r\n\r\nconst items = [\r\n    {\r\n        id: 0,\r\n        label: 'Questions Ordered - Answers Ordered',\r\n        value: runTypes.Q_ORDERED_A_ORDERED\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Questions Ordered - Answers Random',\r\n        value: runTypes.Q_ORDERED_A_RANDOM\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Questions Random - Answers Ordered',\r\n        value: runTypes.Q_RANDOM_A_ORDERED\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Questions Random - Answers Random',\r\n        value: runTypes.Q_RANDOM_A_RANDOM\r\n    }\r\n];\r\n\r\nconst SelectLoader = ({runTest}) => {\r\n    const [selected, setSelected] = useState({\r\n        id: 3,\r\n        label: 'Questions Random - Answers Random',\r\n        value: runTypes.Q_RANDOM_A_RANDOM\r\n    });\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n        setSelected(items.find(item => item.value === value));\r\n    };\r\n\r\n    return (\r\n        <Constiner>\r\n            <Input type='select' onChange={onChange} value={selected.value}>\r\n                {items.map(item => <option value={item.value} key={item.id}>{item.label}</option>)}\r\n            </Input>\r\n            <Button color='success' onClick={() => runTest(selected.value)}>Run</Button>\r\n        </Constiner>\r\n    )\r\n};\r\n\r\nconst Constiner = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport default SelectLoader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Question = ({number, question, answers, correct}) => {\r\n    return (\r\n        <QuestionContainer>\r\n            <QuestionText>{`${number}. ${question}`}</QuestionText>\r\n            <AnswersList>\r\n                {answers.map((item, index) => <Answer correct={index === correct} key={index}>{item}</Answer>)}\r\n            </AnswersList>\r\n        </QuestionContainer>\r\n    )\r\n};\r\n\r\nconst QuestionContainer = styled.div`\r\n    padding: 10px;\r\n`;\r\nconst QuestionText = styled.p`\r\n    font-weight: bold;\r\n`;\r\nconst AnswersList = styled.ul`\r\n    list-style-type: lower-alpha;\r\n`;\r\n\r\nconst Answer = styled.li`\r\n    background-color: ${({correct}) => correct ? 'green' : 'none'};\r\n`;\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport Question from './Question'\r\n\r\nconst QuestionsList = ({questions}) => {\r\n\r\n    return (\r\n        <div>\r\n            {questions.map((item, index) =><Question key={index} number={index + 1} question={item.q} answers={item.a} correct={item.c}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default QuestionsList;\r\n","import React, {useEffect} from \"react\";\r\nimport Question from \"./Question\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TestPanel = ({testQuestions, setTestQuestions, currentQuestion, setCurrentQuestion, setEndTest}) => {\r\n    const { q, a, c } = testQuestions.slice(currentQuestion, currentQuestion + 1).pop();\r\n\r\n    const keyUpFun = event => {\r\n        const {keyCode} = event;\r\n\r\n        let index;\r\n        if (keyCode >= 49 && keyCode <= 57) {\r\n            index = keyCode - 49;\r\n        } else if (keyCode >= 65 && keyCode <= 90) {\r\n            index = keyCode - 65;\r\n        } else if (keyCode >= 97 && keyCode <= 122) {\r\n            index = keyCode - 97;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        if (index >= a.length) {\r\n            return;\r\n        }\r\n\r\n        if (c === index) {\r\n            if (currentQuestion + 1 < testQuestions.length) {\r\n                setCurrentQuestion(currentQuestion+1)\r\n            } else {\r\n                setCurrentQuestion(0);\r\n                setEndTest(true);\r\n            }\r\n        } else {\r\n            const arrCopy = [...testQuestions];\r\n            const current = arrCopy[currentQuestion];\r\n            arrCopy.splice(currentQuestion, 1, {\r\n                ...current,\r\n                fails: current.fails + 1,\r\n            });\r\n            setTestQuestions(arrCopy)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keypress', keyUpFun);\r\n        return () => window.removeEventListener('keypress', keyUpFun);\r\n    }, [keyUpFun]);\r\n\r\n    return (\r\n        <Container>\r\n            <p>{currentQuestion + 1}/{testQuestions.length}</p>\r\n            <Question number={currentQuestion + 1} answers={a} question={q}/>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n  \r\n`;\r\n\r\nexport default TestPanel;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Question from \"./Question\";\r\n\r\nconst EndPanel = ({testQuestions}) => {\r\n    const failedQuestions = testQuestions\r\n        .filter(item => item.fails > 0)\r\n        .sort((i1, i2) => i1.index - i2.index);\r\n\r\n    return (\r\n        <>\r\n            <p>Failed questions: {failedQuestions.length}/{testQuestions.length}</p>\r\n            <div>\r\n                {failedQuestions.map(item => {\r\n                    const {index, q, a, c, fails} = item;\r\n                    return <>\r\n                            <Question key={index} number={index + 1} question={q} answers={a} correct={c}/>\r\n                            <FailsContainer>Fails: {fails}</FailsContainer>\r\n                        </>\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst FailsContainer = styled.p`\r\n  margin-left: 35px;\r\n`;\r\n\r\nexport default EndPanel;\r\n","export const shuffle = (array) => {\r\n    let currentIndex = array.length;\r\n    let temporaryValue, randomIndex;\r\n    const newArray = [...array];\r\n\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = newArray[currentIndex];\r\n        newArray[currentIndex] = newArray[randomIndex];\r\n        newArray[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return newArray;\r\n};\r\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport SelectLoader from './components/SelectLoader'\nimport SelectRun, {runTypes} from './components/SelectRun'\nimport QuestionsList from \"./components/QuestionsList\";\nimport TestPanel from \"./components/TestPanel\";\nimport EndPanel from \"./components/EndPanel\";\nimport {shuffle} from \"./util/array\";\nimport {Button} from \"reactstrap\";\n\nfunction App() {\n  const [questions, setQuestions] = useState(null);\n  const [testQuestions, setTestQuestions] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [endTest, setEndTest] = useState(false);\n\n  const runTest = (runType) => {\n    if (questions == null) {\n      return;\n    }\n\n    let testQuestions = questions.map((item, index) => {\n      const {q, a, c} = item;\n      return {\n        index,\n        q,\n        a: a.map((aItem, index) => ({\n          a: aItem,\n          c: index === c\n        })),\n        fails: 0\n      }\n    });\n\n    if (runType === runTypes.Q_RANDOM_A_ORDERED || runType === runTypes.Q_RANDOM_A_RANDOM) {\n      testQuestions = shuffle(testQuestions);\n    } else {\n      testQuestions = [...testQuestions];\n    }\n\n    if (runType === runTypes.Q_ORDERED_A_RANDOM || runType === runTypes.Q_RANDOM_A_RANDOM) {\n      testQuestions = testQuestions.map(item => {\n        return {\n          ...item,\n          a: shuffle(item.a)\n        }\n      })\n    }\n\n    testQuestions = testQuestions.map(item => {\n      const aCorrectIndex = item.a.findIndex(aItem => aItem.c);\n      return {\n        ...item,\n        a: item.a.map(aItem => aItem.a),\n        c: aCorrectIndex\n      }\n    });\n\n    setEndTest(false);\n    setTestQuestions(testQuestions);\n  };\n\n  return <Container>\n    <InnerContainer>\n      <Options>\n        <Button color='danger' onClick={() => setTestQuestions(null)}>Back</Button>\n        <SelectLoader setQuestions={setQuestions}/>\n        <SelectRun runTest={runTest}/>\n      </Options>\n      {questions == null && testQuestions == null && <p>Choose questions</p>}\n      {questions != null && testQuestions == null && <QuestionsList questions={questions}/>}\n      {testQuestions != null && endTest === false && <TestPanel\n          testQuestions={testQuestions}\n          setTestQuestions={setTestQuestions}\n          currentQuestion={currentQuestion}\n          setCurrentQuestion={setCurrentQuestion}\n          setEndTest={setEndTest}\n      />}\n      {endTest && <EndPanel testQuestions={testQuestions}/>}\n    </InnerContainer>\n  </Container>;\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    background-color: #1f1f1f;\n    color: #e2e2e2;\n    min-height: 100vh;\n`;\n\nconst Options = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst InnerContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-width: 900px;\n    width: 100%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}